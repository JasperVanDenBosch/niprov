#!/usr/bin/python
# -*- coding: UTF-8 -*-
import argparse
import niprov

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(dest="command",
    title='subcommands')

discover = subparsers.add_parser('discover', 
    help='Find image files.')
discover.add_argument('root', default='.', 
    help='Directory below which to search for files.')

log = subparsers.add_parser('log', 
    help='Enter provenance of new files created as the result of a '+
    'transformation of existing files. Multiple new and parent files allowed.')
log.add_argument('transformation', 
    help='Name of the transformation applied.')
log.add_argument('--new','-n', nargs='+', required=True,
    help='Path to a resulting image.')
log.add_argument('--parent','-p', nargs='+', required=True,
    help='Path to an image that was the basis of the transformation.')
log.add_argument('--transient', action='store_const', const=True, default=False, 
    help='Indicate that the file may not exist now or may be temporary.')
log.add_argument('--code', default=None,
    help='Code used to generate the new image.')
log.add_argument('--logtext', default=None,
    help='Feedback printed during transformation.')
log.add_argument('--script', default=None,
    help='Path to the code file used for the transformation.')

record = subparsers.add_parser('record',
    help='Run shell commands and log provenance for files created by it.')
record.add_argument('--transient', action='store_const', const=True, default=False, 
    help='Indicate that the file may not exist now or may be temporary.')
record.add_argument('--new','-n', nargs='*',
    help='Path to a resulting image.')
record.add_argument('--parent','-p', nargs='*',
    help='Path to an image that was the basis of the transformation.')
record.add_argument('code',
    help='Shell commands that result in a new image.')

add = subparsers.add_parser('add', 
    help='Simply register the file for future reference.')
add.add_argument('new', 
    help='Where the file resides.')
add.add_argument('--transient', action='store_const', const=True, default=False, 
    help='Indicate that the file may not exist now or may be temporary.')

export = subparsers.add_parser('export',
    help='Provide provenance for known files. By default shows most recent files.')
export.add_argument('--file', default=None,
    help='Report on the file at this location.')
export.add_argument('--subject', default=None,
    help='Report on files for this subject.')
export.add_argument('--statistics', action='store_const', const=True, default=False, 
    help='Summarize provenance collected.')
export.add_argument('--pipeline', action='store_const', const=True, default=False, 
        help='Export pipeline for a file specified with --file.')
export.add_argument('--medium', '-m', default='stdout',
    help='One of "stdout" or "file".')
export.add_argument('--format', '-f', default='simple',
    help='Format in which to print. One of "simple","narrated", "xml","json".')

backup = subparsers.add_parser('backup',
    help='Save data provenance to a json textfile.')

version = subparsers.add_parser('version',
    help='Show niprov software version.')

rename = subparsers.add_parser('rename',
    help='Rename dicom files without extension.')
rename.add_argument('directory', 
    help='Directory in which to look for files to rename.')

todo = subparsers.add_parser('todo',
    help='Show files marked for approval.')

approve = subparsers.add_parser('approve',
    help='Mark one file as having passed QC.')
approve.add_argument('filepath', 
    help='Where the file resides.')

serve = subparsers.add_parser('serve',
    help='Start a webserver that allows browsing through provenance.')

importp = subparsers.add_parser('import',
    help='Load backup data from a file.')
importp.add_argument('file',
    help='Path to json file with provenance backup.')

search = subparsers.add_parser('search',
    help='Search for files by text.')
search.add_argument('text',
    help="Words to look for in the files' provenance.")

args = parser.parse_args()
if args.command == 'discover':
    niprov.discover(args.root)
elif args.command == 'log':
    niprov.log(args.new, args.transformation, args.parent, code=args.code, 
        transient=args.transient, logtext=args.logtext, script=args.script)
elif args.command == 'record':
    niprov.record(args.code, new=args.new, parents=args.parent, 
        transient=args.transient)
elif args.command == 'add':
    niprov.add(args.new, transient=args.transient)
elif args.command == 'export':
    query = niprov.ProvenanceContext().get()
    if args.file:
        provenance = query.byLocation(args.file)
    elif args.subject:
        provenance = query.bySubject(args.subject)
    elif args.statistics:
        provenance = query.statistics()
    else:
        provenance = query.latest()
    niprov.export(provenance, medium=args.medium, form=args.format, 
                  pipeline=args.pipeline)
elif args.command == 'search':
    results = niprov.search(args.text)
    niprov.print_(results)
elif args.command == 'backup':
    niprov.backup()
elif args.command == 'version':
    import pkg_resources
    print(pkg_resources.get_distribution("niprov").version)
elif args.command == 'rename':
    niprov.renameDicoms(args.directory)
elif args.command == 'todo':
    niprov.markedForApproval()
elif args.command == 'approve':
    niprov.approve(args.filepath)
elif args.command == 'serve':
    niprov.serve()
elif args.command == 'import':
    niprov.importp(args.file)

